# Generated by Django 4.2.7 on 2025-09-19 23:11

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContentProcessingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('source_type', models.CharField(choices=[('profile', 'Profile Information'), ('project', 'Project Description'), ('experience', 'Work Experience'), ('skills', 'Skills Information'), ('education', 'Education Background'), ('resume', 'Resume Content'), ('blog', 'Blog Post'), ('code', 'Code Documentation')], max_length=20)),
                ('source_id', models.CharField(max_length=100)),
                ('source_title', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('chunks_created', models.PositiveIntegerField(default=0)),
                ('embeddings_generated', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Content Processing Job',
                'verbose_name_plural': 'Content Processing Jobs',
                'db_table': 'ai_services_contentprocessingjob',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmbeddingCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('text_hash', models.CharField(help_text='SHA256 hash of the text', max_length=64, unique=True)),
                ('text_content', models.TextField()),
                ('embedding', models.TextField(help_text='JSON string of embedding vector (temporary until pgvector)')),
                ('model_name', models.CharField(default='text-embedding-ada-002', max_length=50)),
                ('token_count', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Embedding Cache',
                'verbose_name_plural': 'Embedding Caches',
                'db_table': 'ai_services_embeddingcache',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RAGQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('query_text', models.TextField()),
                ('context_type', models.CharField(blank=True, choices=[('profile', 'Profile Information'), ('project', 'Project Description'), ('experience', 'Work Experience'), ('skills', 'Skills Information'), ('education', 'Education Background'), ('resume', 'Resume Content'), ('blog', 'Blog Post'), ('code', 'Code Documentation')], max_length=20)),
                ('source_id', models.CharField(blank=True, max_length=100)),
                ('chunks_retrieved', models.JSONField(default=list, help_text='IDs of chunks retrieved')),
                ('chunks_used', models.JSONField(default=list, help_text='IDs of chunks actually used')),
                ('similarity_scores', models.JSONField(default=list, help_text='Similarity scores for retrieved chunks')),
                ('response_generated', models.TextField(blank=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('tokens_used', models.PositiveIntegerField(blank=True, null=True)),
                ('processing_time', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'RAG Query',
                'verbose_name_plural': 'RAG Queries',
                'db_table': 'ai_services_ragquery',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('content', models.TextField()),
                ('embedding', models.TextField(blank=True, help_text='JSON string of embedding vector (temporary until pgvector)')),
                ('source_type', models.CharField(choices=[('profile', 'Profile Information'), ('project', 'Project Description'), ('experience', 'Work Experience'), ('skills', 'Skills Information'), ('education', 'Education Background'), ('resume', 'Resume Content'), ('blog', 'Blog Post'), ('code', 'Code Documentation')], max_length=20)),
                ('source_id', models.CharField(help_text='ID of the source document/object', max_length=100)),
                ('source_title', models.CharField(blank=True, max_length=200)),
                ('chunk_index', models.PositiveIntegerField(default=0)),
                ('token_count', models.PositiveIntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about the chunk')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Document Chunk',
                'verbose_name_plural': 'Document Chunks',
                'db_table': 'ai_services_documentchunk',
                'ordering': ['source_type', 'source_id', 'chunk_index'],
                'indexes': [models.Index(fields=['source_type'], name='ai_services_source__aff040_idx'), models.Index(fields=['source_id'], name='ai_services_source__70c75e_idx'), models.Index(fields=['is_active'], name='ai_services_is_acti_c123eb_idx')],
            },
        ),
    ]
