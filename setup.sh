#!/bin/bash

# AI Portfolio Site - Complete Production Setup Script
# This script sets up everything: environment, Docker, SSL, and deployment

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Default values
DEFAULT_FRONTEND_DOMAIN="hamedelfayome.dev"
DEFAULT_BACKEND_DOMAIN="api.hamedelfayome.dev"
DEFAULT_EMAIL="admin@hamedelfayome.dev"

echo -e "${BLUE}🚀 AI Portfolio Site - Complete Setup${NC}"
echo "This script will set up everything for production deployment."
echo

# Function to generate secure password
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
}

# Function to generate Django secret key
generate_secret_key() {
    python3 -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())" 2>/dev/null || \
    openssl rand -base64 50 | tr -d "=+/" | cut -c1-50
}

# Collect user input
echo -e "${YELLOW}📝 Configuration Setup${NC}"

read -p "Frontend domain [$DEFAULT_FRONTEND_DOMAIN]: " FRONTEND_DOMAIN
FRONTEND_DOMAIN=${FRONTEND_DOMAIN:-$DEFAULT_FRONTEND_DOMAIN}

read -p "Backend domain [$DEFAULT_BACKEND_DOMAIN]: " BACKEND_DOMAIN
BACKEND_DOMAIN=${BACKEND_DOMAIN:-$DEFAULT_BACKEND_DOMAIN}

read -p "Email for SSL certificates [$DEFAULT_EMAIL]: " ADMIN_EMAIL
ADMIN_EMAIL=${ADMIN_EMAIL:-$DEFAULT_EMAIL}

read -p "OpenAI API Key (required for AI features): " OPENAI_KEY
while [[ -z "$OPENAI_KEY" ]]; do
    echo -e "${RED}OpenAI API Key is required for AI features!${NC}"
    read -p "OpenAI API Key: " OPENAI_KEY
done

# Auto-generate secure values
echo -e "${YELLOW}🔐 Generating secure credentials...${NC}"
SECRET_KEY=$(generate_secret_key)
DB_PASSWORD=$(generate_password)

echo -e "${GREEN}✅ Configuration collected${NC}"

# Create .env file
echo -e "${YELLOW}📄 Creating .env file...${NC}"
cat > .env << EOF
# AI Portfolio Site - Production Environment
# Auto-generated by setup script on $(date)

# Django Core Settings
SECRET_KEY=$SECRET_KEY
DEBUG=False
ENVIRONMENT=production

# Domain Configuration
ALLOWED_HOSTS=$BACKEND_DOMAIN,$FRONTEND_DOMAIN,localhost,127.0.0.1

# Database Configuration
DB_NAME=portfolio_db
DB_USER=portfolio_user
DB_PASSWORD=$DB_PASSWORD
DB_HOST=db
DB_PORT=5432

# Redis Cache
REDIS_URL=redis://redis:6379/1

# OpenAI API
OPENAI_API_KEY=$OPENAI_KEY

# SSL Configuration
ADMIN_EMAIL=$ADMIN_EMAIL
FRONTEND_DOMAIN=$FRONTEND_DOMAIN
BACKEND_DOMAIN=$BACKEND_DOMAIN
EOF

echo -e "${GREEN}✅ .env file created${NC}"

# Update docker-compose for SSL
echo -e "${YELLOW}🐳 Updating Docker configuration for SSL...${NC}"
cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  web:
    build: .
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - REDIS_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=portfolio_site.settings
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/status/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-portfolio_db}
      POSTGRES_USER: ${DB_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-portfolio_user} -d ${DB_NAME:-portfolio_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/usr/share/nginx/html/static:ro
      - media_volume:/usr/share/nginx/html/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:
EOF

# Create nginx configuration with SSL
echo -e "${YELLOW}🌐 Creating Nginx configuration with SSL...${NC}"
cat > nginx.prod.conf << EOF
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone \$binary_remote_addr zone=login:10m rate=1r/s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name $BACKEND_DOMAIN;
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        location / {
            return 301 https://\$server_name\$request_uri;
        }
    }

    # HTTPS API Server
    server {
        listen 443 ssl http2;
        server_name $BACKEND_DOMAIN;

        ssl_certificate /etc/letsencrypt/live/$BACKEND_DOMAIN/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/$BACKEND_DOMAIN/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        client_max_body_size 10M;

        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://web:8000;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }

        # Admin panel
        location /admin/ {
            limit_req zone=login burst=5 nodelay;
            proxy_pass http://web:8000;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }

        # Health check
        location /health/ {
            proxy_pass http://web:8000;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }

        # Static files
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Media files
        location /media/ {
            alias /usr/share/nginx/html/media/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Default Django app
        location / {
            proxy_pass http://web:8000;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
EOF

# Create SSL setup script
echo -e "${YELLOW}🔒 Creating SSL setup script...${NC}"
cat > init-ssl.sh << 'EOF'
#!/bin/bash

# SSL Certificate Setup with Let's Encrypt

source .env

echo "🔒 Setting up SSL certificates for $BACKEND_DOMAIN..."

# Create directories
mkdir -p certbot/conf certbot/www

# Check if certificates already exist
if [ ! -f "certbot/conf/live/$BACKEND_DOMAIN/fullchain.pem" ]; then
    echo "📝 Obtaining SSL certificate..."

    # Start nginx with HTTP only for initial certificate
    docker-compose up -d nginx

    # Get certificate
    docker-compose run --rm certbot \
        certonly --webroot \
        --webroot-path=/var/www/certbot \
        --email $ADMIN_EMAIL \
        --agree-tos \
        --no-eff-email \
        -d $BACKEND_DOMAIN

    echo "✅ SSL certificate obtained!"
else
    echo "✅ SSL certificate already exists!"
fi

# Restart nginx with SSL
docker-compose restart nginx
EOF

chmod +x init-ssl.sh

# Create deployment script
echo -e "${YELLOW}🚀 Creating deployment script...${NC}"
cat > deploy.sh << 'EOF'
#!/bin/bash

# Complete Deployment Script

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}🚀 Starting deployment...${NC}"

# Load environment
source .env

# Stop existing services
echo -e "${YELLOW}🛑 Stopping existing services...${NC}"
docker-compose down || true

# Build and start without nginx first
echo -e "${YELLOW}🔨 Building and starting core services...${NC}"
docker-compose up --build -d web db redis

# Wait for services
echo -e "${YELLOW}⏳ Waiting for services to be ready...${NC}"
sleep 30

# Set up SSL if needed
echo -e "${YELLOW}🔒 Setting up SSL...${NC}"
./init-ssl.sh

# Start all services
echo -e "${YELLOW}🌐 Starting all services with SSL...${NC}"
docker-compose up -d

# Final health check
echo -e "${YELLOW}🏥 Performing health checks...${NC}"
sleep 20

if curl -f -k https://$BACKEND_DOMAIN/health/status/ > /dev/null 2>&1; then
    echo -e "${GREEN}✅ Deployment successful!${NC}"
    echo -e "${GREEN}🌐 Your API is running at: https://$BACKEND_DOMAIN${NC}"
    echo -e "${GREEN}📊 Admin panel: https://$BACKEND_DOMAIN/admin/${NC}"
    echo -e "${GREEN}🔌 API docs: https://$BACKEND_DOMAIN/api/v1/${NC}"
else
    echo -e "${YELLOW}⚠️  SSL setup in progress. Check in a few minutes.${NC}"
    echo -e "${GREEN}🌐 Your API is running at: http://$BACKEND_DOMAIN${NC}"
fi

echo
echo -e "${YELLOW}📋 Useful commands:${NC}"
echo "  • View logs: docker-compose logs -f"
echo "  • Stop: docker-compose down"
echo "  • Restart: docker-compose restart"
EOF

chmod +x deploy.sh

echo -e "${GREEN}✅ Setup complete!${NC}"
echo
echo -e "${YELLOW}📋 Summary:${NC}"
echo "• Frontend domain: $FRONTEND_DOMAIN"
echo "• Backend domain: $BACKEND_DOMAIN"
echo "• SSL email: $ADMIN_EMAIL"
echo "• Environment file: .env (created)"
echo "• Docker config: docker-compose.yml (updated)"
echo "• Nginx config: nginx.prod.conf (created)"
echo
echo -e "${GREEN}🚀 To deploy, run:${NC}"
echo -e "${BLUE}  ./deploy.sh${NC}"
echo
echo -e "${YELLOW}⚠️  Make sure your DNS points:${NC}"
echo "• $BACKEND_DOMAIN → this server IP"
echo "• $FRONTEND_DOMAIN → your frontend server IP"